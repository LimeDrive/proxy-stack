---
version: "3.8"

secrets:
  JWT_SECRET:
    file: ./secrets/JWT_SECRET
  SESSION_SECRET:
    file: ./secrets/SESSION_SECRET
  POSTGRES_PASSWORD:
    file: ./secrets/POSTGRES_PASSWORD
  STORAGE_ENCRYPTION_KEY:
    file: ./secrets/STORAGE_ENCRYPTION_KEY
  AUTHELIA_STORAGE_POSTGRES_PASSWORD:
    file: ./secrets/AUTHELIA_STORAGE_POSTGRES_PASSWORD
  AUTHELIA_DUO_API_SECRET_KEY:
    file: ./secrets/AUTHELIA_DUO_API_SECRET_KEY
  AUTHELIA_NOTIFIER_SMTP_PASSWORD:
    file: ./secrets/AUTHELIA_NOTIFIER_SMTP_PASSWORD
  CF_API_EMAIL:
    file: ./secrets/CF_API_EMAIL
  CF_DNS_API_TOKEN:
    file: ./secrets/CF_DNS_API_TOKEN

services:
  authelia:
    image: authelia/authelia:${AUTHELIA_TAG:-latest}
    container_name: authelia
    restart: unless-stopped
    command:
      - "authelia"
      - "--config=/config/authelia_config.yml"
      - "--config=/config/authelia_access_control.yml"
      - "--config=/config/authelia_notifier.yml"
    secrets:
      - JWT_SECRET
      - SESSION_SECRET
      - AUTHELIA_STORAGE_POSTGRES_PASSWORD
      - STORAGE_ENCRYPTION_KEY
      - AUTHELIA_DUO_API_SECRET_KEY
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD
    environment:
      TZ: ${TZ:-Europe/Paris}
      AUTHELIA_JWT_SECRET_FILE: /run/secrets/JWT_SECRET
      AUTHELIA_SESSION_SECRET_FILE: /run/secrets/SESSION_SECRET
      AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE: /run/secrets/AUTHELIA_STORAGE_POSTGRES_PASSWORD
      AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /run/secrets/STORAGE_ENCRYPTION_KEY
      AUTHELIA_DUO_API_SECRET_KEY_FILE: /run/secrets/AUTHELIA_DUO_API_SECRET_KEY
      AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: /run/secrets/AUTHELIA_NOTIFIER_SMTP_PASSWORD
    networks:
      traefik_network:
        ipv4_address: 172.20.0.2
      redis_network: null
      postgres_network: null
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authelia.rule=Host(`auth.${DOMAINE:?err}`)"
      - "traefik.http.routers.authelia.entrypoints=web,websecure"
      - "traefik.http.routers.authelia.tls=true"
      - "traefik.http.routers.authelia.tls.certresolver=cf"
      - "traefik.http.routers.authelia.service=authelia-svc"
      - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"
    expose:
      - 9091
    volumes:
      - ./config:/config
  
  postgres:
    container_name: postgres
    image: postgres:${POSTGRES_TAG:-14}
    restart: unless-stopped
    secrets:
      - AUTHELIA_STORAGE_POSTGRES_PASSWORD
    env_file:
      - ./config/postgresql.env
    networks:
      - postgres_network
    volumes:
      - ./data/postgresql:/var/lib/postgresql/data
    expose:
      - 5432
    
  pgbackups:
    container_name: pgbackups
    image: prodrigestivill/postgres-backup-local
    restart: unless-stopped
    env_file:
      - ./config/pgbackups.env
    secrets:
      - AUTHELIA_STORAGE_POSTGRES_PASSWORD
    volumes:
      - ./backups/postgresql-authelia:/backups
    depends_on:
      - postgres
    networks:
      - postgres_network

  redis:
    image: redis:${REDIS_TAG:-alpine}
    container_name: redis
    volumes:
      - ./data/redis:/data
    networks:
      - redis_network
    expose:
      - 6379
    restart: unless-stopped
    environment:
      TZ: ${TZ:-Europe/Paris}
  
  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:${DOCKERPROXY_TAG:-edge}
    container_name: dockerproxy
    restart: unless-stopped
    mem_limit: 1G
    cpus: 0.50
    volumes:
      - ${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock:ro
    environment:
      CONTAINERS: 1
    networks:
      - docker_proxy

  traefik:
    image: traefik:${TRAEFIK_TAG:-latest}
    container_name: traefik
    restart: unless-stopped
    read_only: true
    mem_limit: 2G
    cpus: 0.75
    depends_on:
      - dockerproxy
      - authelia
    security_opt:
      - no-new-privileges:true
    secrets:
      - CF_API_EMAIL
      - CF_DNS_API_TOKEN
    environment:
      CF_API_EMAIL_FILE: /run/secrets/CF_API_EMAIL
      CF_DNS_API_TOKEN_FILE: /run/secrets/CF_DNS_API_TOKEN
    volumes:
      - ./config/traefik.toml:/etc/traefik/traefik.toml:ro    # Static Traefik Configuration
      - ./config/dynamic/:/etc/traefik/dynamic/:ro            # Folder to store dynamic configuration file provider
      - ./config/authusers.txt:/etc/traefik/authusers.txt:ro  # userfile for basic auth
      - ./config/acme/acme.json:/etc/traefik/acme.json        # certificate storage tls chalange
      - ./config/acme/cfcert.json:/etc/traefik/cfcert.json    # certificate storage cloudflare chalange
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=web,websecure"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAINE:?err}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls.certresolver=cf"
      - "traefik.http.routers.traefik.tls.domains[0].main=${DOMAINE:?err}"
      - "traefik.http.routers.traefik.tls.domains[0].sans=*.${DOMAINE:?err}"
      - "traefik.http.routers.traefik.middlewares=auth_2FA@file"
    ports:
      - "80:80"
      - "443:443"
      - "2222:2222" # ssh gitea
    networks:
      traefik_network:
          ipv4_address: 172.20.0.3
      docker_proxy: null

  crowdsec:
    image: crowdsecurity/crowdsec:${CROWDSEC_TAG:-latest}
    container_name: crowdsec
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      PGID: ${XID:-1000}
      TZ: ${TZ:-Europe/Paris}
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/http-cve LePresidente/authelia"
    volumes:
      - ./config/acquis.yaml:/etc/crowdsec/acquis.yaml
      - ./data/crowdsec-db:/var/lib/crowdsec/data/
      - ./config/crowdsec-config:/etc/crowdsec/
      - ${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock:ro
    expose:
      - 8080
    networks:
      docker_proxy: null
      crowdsec_hub: null
      traefik_network:
        ipv4_address: 172.20.0.4

  bouncer-traefik:
    image: fbonalair/traefik-crowdsec-bouncer:${BOUNCER_TRAEFIK_TAG:-0.1.1}
    container_name: bouncer-traefik
    environment:
      CROWDSEC_BOUNCER_API_KEY: API KEY # replace by api provide by crowdsec
      CROWDSEC_AGENT_HOST: crowdsec:8080
      GIN_MODE: release
    expose:
      - 8080
    depends_on:
      - crowdsec
    restart: unless-stopped
    networks:
      crowdsec_hub: null
      traefik_network:
        ipv4_address: 172.20.0.5

networks:
  traefik_network:
    external: true
    name: traefik_network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24    # docker network create --driver=bridge --subnet=172.20.0.0/24 traefik_network
  docker_proxy:
    driver: bridge
    internal: true
  redis_network:
    driver: bridge
    internal: true
  postgres_network:
    driver: bridge
    internal: true
  crowdsec_hub:
    driver: bridge
    internal: true
